<?xml version="1.0" encoding="UTF-8"?>

<project name="your-project" default="metrics" basedir=".">
    <property environment="env"/>

    <target name="metrics"
            depends="prepare,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpcb"/>

    <target name="metrics-parallel"
            depends="prepare,tools-parallel,phpcb"/>

    <target name="symfony-init"
            depends="vendors,clear-cache">
        <copy file="./app/config/parameters.yml.jenkins" tofile="./app/config/parameters.yml" />
    </target>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpcb"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/code-browser"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
    </target>
    
    <target name="prepare" description="Prepares tests">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/code-browser"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg value="${basedir}/build/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg value="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/build/psr-2.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec executable="phpdox"/>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${basedir}/build/logs" />
            <arg value="--source" />
            <arg path="${basedir}/src" />
            <arg value="--output" />
            <arg path="${basedir}/build/code-browser" />
        </exec>
    </target>
 
    <target name="vendors" depends="prepare" description="Install dependencies">
        <exec executable="rm" failonerror="true">
            <arg line="-rf vendor" />
        </exec>

        <exec executable="rm" failonerror="false">
            <arg value="app/bootstrap.php.cache" />
        </exec>

        <exec executable="rm" failonerror="false">
            <arg value="composer.phar" />
        </exec>

        <exec executable="wget" failonerror="true">
            <arg value="-nc" />
            <arg value="http://getcomposer.org/composer.phar" />
        </exec>

        <exec executable="php" failonerror="true">
            <arg value="composer.phar" />
            <arg value="install" />
        </exec>
    </target>

    <target name="clear-cache" depends="vendors" description="Clear cache">
        <exec executable="rm" failonerror="true">
            <arg value="-rf" />
            <arg value="app/cache/*" />
        </exec>
        <exec executable="php" failonerror="true">
            <arg line="app/console cache:warmup --env=test" />
        </exec>
    </target>

    <target name="phpunit"
            depends="prepare"
            description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
        <exec executable="phpunit" failonerror="true">
            <arg line="-c app --coverage-clover build/logs/clover.xml
                        --coverage-html build/coverage
                        --log-junit build/logs/junit.xml" />
        </exec>
    </target>

    <target name="init-node" description="Install required local node modules">
        <exec executable="npm" failonerror="true">
            <arg line="install coffee-script less jasmine-node jquery jsdom" />
        </exec>
    </target>

    <target name="jasmine-node"
            depends="init-node"
            description="Run unit tests using jasmine-node and generates reports/TEST-[spec name].xml based on spec">
        <exec executable="./node_modules/jasmine-node/bin/jasmine-node" failonerror="true">
            <arg line="src/OY/MainBundle/Tests/spec --coffee --junitreport" />
            <arg line="src/OY/UserBundle/Tests/spec --coffee --junitreport" />
        </exec>
    </target>
</project>
